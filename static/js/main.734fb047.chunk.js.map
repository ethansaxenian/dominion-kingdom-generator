{"version":3,"sources":["styles/CardsDisplay.module.css","styles/Selector.module.css","lib/constants.js","lib/utils.js","components/CardsDisplay.js","components/SearchBar.js","components/CardSearcher.js","components/NavBar.js","components/Selector.js","components/KingdomSettings.js","components/KingdomDisplay.js","components/ModalAlert.js","components/GenerateButton.js","components/KingdomGenerator.js","App.js","index.js"],"names":["module","exports","EXPANSIONS","PROMOS","NON_SUPPLY_TYPES","CARD_SHAPED_TYPES","BASIC_CARDS","SECONDARY_CARDS","CARDS_TO_REMOVE","ORIGINAL_BASE_CARDS","BASE_2_CARDS","ORIGINAL_INTRIGUE_CARDS","INTRIGUE_2_CARDS","isValidKingdomCard","card","onlyRandomizers","in_supply","types","every","type","includes","name","sortTwoCards","card1","card2","sortBy","first","second","parseInt","coins","potions","debt","slice","arrayIncludesCard","array","map","obj","toLowerCase","arrayIncludesCardName","drawCards","cards","num","predicate","_","sampleSize","filter","youngWitchPredicate","addExtraCards","kingdom","landscapes","availableCards","newCards","bane","notInKingdom","push","wotm","hasValidExpansion","expansions","expansion","generateBlackMarket","promos","blackMarketOptions","some","CardsDisplay","data","swapCard","cardWidth","Card","style","undefined","borderWidth","href","link","target","rel","Figure","Image","width","src","process","img","alt","Body","Text","Button","size","variant","onClick","className","styles","cardsList","SearchBar","searchTerm","setSearchTerm","setSortBy","Row","Col","xs","span","offset","sm","md","lg","Form","Control","value","placeholder","onChange","event","InputGroup","CardSearcher","useState","sortedCards","cost","text","parsedTerm","toString","sort","NavBar","page","setPage","Navbar","bg","margin","Nav","Item","Link","active","eventKey","onSelect","Selector","toggle","options","adjustAmts","expansionAmts","setExpansionAmts","selectors","option","Check","label","min","max","Accordion","Toggle","as","Header","header","Collapse","KingdomSettings","toggleExpansion","togglePromo","KingdomDisplay","swapLandscape","usePlatinumColony","platinumColony","blackMarketDeck","setBlackMarketDeck","useEffect","supply","length","oldCard","newOptions","newBMDeck","newCard","ModalAlert","onClose","Modal","show","onHide","Alert","textAlign","Footer","GenerateButton","generateKingdom","alert","setAlert","KingdomGenerator","setKingdom","setLandScapes","setExpansions","setPromos","setUsePlatinumColony","fromPairs","availableLandscapes","isLandscape","remainingCards","remainingLandscapes","generateKingdomFromRules","extraExpansions","toPairs","forEach","exp","amt","leftovers","concat","a","b","promo","sum","newKingdom","newLandscapes","sample","marginTop","marginBottom","combinations","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.734fb047.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardsList\":\"CardsDisplay_cardsList__2_Zay\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Selector_header__2k5aN\"};","export const EXPANSIONS = ['Adventures', 'Alchemy', 'Base', 'Base 1st Edition', 'Cornucopia', 'Dark Ages', 'Empires', 'Guilds', 'Hinterlands', 'Intrigue', 'Intrigue 1st Edition', 'Menagerie', 'Nocturne', 'Prosperity', 'Renaissance', 'Seaside'];\n\nexport const PROMOS = ['Black Market', 'Captain', 'Church', 'Dismantle', 'Envoy', 'Governor', 'Prince', 'Sauna', 'Stash', 'Summon', 'Walled Village'];\n\nexport const TYPES = ['Action', 'Artifact', 'Attack', 'Boon', 'Castle', 'Command', 'Curse', 'Doom', 'Duration', 'Event', 'Fate', 'Gathering', 'Heirloom', 'Hex', 'Knight', 'Landmark', 'Looter', 'Night', 'Prize', 'Project', 'Reaction', 'Reserve', 'Ruins', 'Shelter', 'Spirit', 'State', 'Traveller', 'Treasure', 'Victory', 'Way', 'Zombie'];\n\nexport const SUPPLY_TYPES = [ 'Action', 'Attack', 'Castle', 'Command', 'Curse', 'Doom', 'Duration', 'Fate', 'Gathering', 'Knight', 'Looter', 'Night', 'Reaction', 'Reserve', 'Ruins', 'Traveller', 'Treasure', 'Victory'];\n\nexport const NON_SUPPLY_TYPES = ['Artifact', 'Boon', 'Curse', 'Event', 'Heirloom', 'Hex', 'Landmark', 'Prize', 'Project', 'Ruins', 'Shelter', 'State', 'Way', 'Zombie'];\n\nexport const CARD_SHAPED_TYPES = ['Event', 'Landmark', 'Project', 'Way'];\n\nexport const BASIC_CARDS = ['Copper', 'Silver', 'Gold', 'Estate', 'Duchy', 'Province', 'Curse'];\n\nexport const SECONDARY_CARDS = ['Platinum', 'Colony', 'Potion'];\n\n// Dame Anna and Humble Castle represent Knights and Castles\nexport const CARDS_TO_REMOVE = ['Avanto', 'Dame Josephine', 'Dame Molly', 'Dame Natalie', 'Dame Sylvia', 'Sir Bailey', 'Sir Destry', 'Sir Martin', 'Sir Michael', 'Sir Vander', 'Rocks', 'Bustling Village', 'Emporium', 'Plunder', 'Fortune', 'Crumbling Castle', 'Small Castle', 'Haunted Castle', 'Opulent Castle', 'Sprawling Castle', 'Grand Castle', \"King's Castle\", ...BASIC_CARDS, ...SECONDARY_CARDS];\n\nexport const ORIGINAL_BASE_CARDS = ['Chancellor', 'Woodcutter', 'Thief', 'Spy', 'Feast', 'Adventurer'];\n\nexport const BASE_2_CARDS = ['Harbinger', 'Merchant', 'Vassal', 'Poacher', 'Bandit', 'Sentry', 'Artisan'];\n\nexport const ORIGINAL_INTRIGUE_CARDS = ['Secret Chamber', 'Great Hall', 'Coppersmith', 'Scout', 'Saboteur', 'Tribute'];\n\nexport const INTRIGUE_2_CARDS = ['Lurker', 'Diplomat', 'Mill', 'Secret Passage', 'Courtier', 'Patrol', 'Replace'];\n","import _ from \"lodash\";\nimport { BASE_2_CARDS, BASIC_CARDS, CARDS_TO_REMOVE, CARD_SHAPED_TYPES, INTRIGUE_2_CARDS, NON_SUPPLY_TYPES, ORIGINAL_BASE_CARDS, ORIGINAL_INTRIGUE_CARDS, SECONDARY_CARDS } from \"./constants\";\n\nexport const isValidKingdomCard = (card, onlyRandomizers) =>\n  card.in_supply\n  && card.types.every((type) => !NON_SUPPLY_TYPES.includes(type))\n  && (onlyRandomizers ? !CARDS_TO_REMOVE.includes(card.name) : true);\n\nexport const isLandscape = (card) => card.types.every((type) => CARD_SHAPED_TYPES.includes(type));\n\nexport const sortTwoCards = (card1, card2, sortBy) => {\n  let first = card1[sortBy];\n  let second = card2[sortBy];\n  if (sortBy === 'cost') {\n    first = parseInt(`${card1.coins ? card1.coins : ''}${card1.potions ? 100 : ''}${card1.debt ? card1.debt.slice(0, -1) + '00000' : ''}` || 0)\n    second = parseInt(`${card2.coins ? card2.coins : ''}${card2.potions ? 100 : ''}${card2.debt ? card2.debt.slice(0, -1) + '00000' : ''}` || 0)\n  }\n  if (first < second) {\n    return -1;\n  } else if (first > second) {\n    return 1;\n  } else {\n    if (card1.name < card2.name) {\n      return -1\n    } else if (card1.name > card2.name) {\n      return 1\n    }\n    return 0\n  }\n}\n\nexport const arrayIncludesCard = (array, card) => array.map((obj) => obj.name.toLowerCase()).includes(card.name.toLowerCase());\n\nexport const arrayIncludesCardName = (array, name) => array.map((card) => card.name.toLowerCase()).includes(name.toLowerCase());\n\nexport const drawCards = (cards, num, predicate) => _.sampleSize(predicate ? cards.filter((card) => predicate(card)) : cards, num);\n\nexport const youngWitchPredicate = (card) => ((card.coins === 2) || (card.coins === 3)) && !card.potions && !card.debt;\n\nexport const addExtraCards = (kingdom, landscapes, availableCards) => {\n  const newCards = kingdom;\n  if (arrayIncludesCardName(newCards, 'Young Witch') && kingdom.every((card) => !card.bane)) {\n    const notInKingdom = availableCards.filter((card) => !arrayIncludesCard(newCards, card));\n    const [bane] = drawCards(notInKingdom, 1, youngWitchPredicate);\n    bane && newCards.push({...bane, bane: true});\n  }\n  if (arrayIncludesCardName(landscapes, 'Way of the Mouse')  && kingdom.every((card) => !card.wotm)) {\n    const notInKingdom = availableCards.filter((card) => !arrayIncludesCard(newCards, card) && card.types.includes('Action'));\n    const [wotm] = drawCards(notInKingdom, 1, youngWitchPredicate);\n    wotm && newCards.push({...wotm, wotm: true});\n  }\n  return newCards\n}\n\nexport const hasValidExpansion = (card, expansions) => {\n  if (ORIGINAL_BASE_CARDS.includes(card.name)) {\n    return expansions.includes('Base 1st Edition')\n  } else if (BASE_2_CARDS.includes(card.name)) {\n    return expansions.includes('Base')\n  } else if (card.expansion === 'Base') {\n    return expansions.includes('Base') || expansions.includes('Base 1st Edition')\n  } else if (ORIGINAL_INTRIGUE_CARDS.includes(card.name)) {\n    return expansions.includes('Intrigue 1st Edition')\n  } else if (INTRIGUE_2_CARDS.includes(card.name)) {\n    return expansions.includes('Intrigue')\n  } else if (card.expansion === 'Intrigue') {\n    return expansions.includes('Intrigue') || expansions.includes('Intrigue 1st Edition')\n  } else {\n    return expansions.includes(card.expansion)\n  }\n}\n\nexport const generateBlackMarket = (cards, kingdom, promos, expansions) => {\n  if (!arrayIncludesCardName(kingdom, 'Black Market')) {\n    return [];\n  }\n  const blackMarketOptions = cards.filter((card) =>\n    isValidKingdomCard(card, false)\n    && (hasValidExpansion(card, expansions) || promos.includes(card.name))\n    && ![...BASIC_CARDS, ...SECONDARY_CARDS].includes(card.name)\n    && !arrayIncludesCard(kingdom, card));\n  if (!kingdom.some((card) => card.potions)) {\n    return blackMarketOptions.filter((card) => !card.potions)\n  }\n  return blackMarketOptions;\n}\n","import styles from '../styles/CardsDisplay.module.css';\nimport { Button, Card, Figure } from 'react-bootstrap';\n\nexport default function CardsDisplay({ data, swapCard, cardWidth }) {\n  const cards = data.map((card) => (\n    <li key={card.name}>\n      <Card style={(card.bane || card.wotm || swapCard) ? undefined : {borderWidth: 0}}>\n        <a href={card.link} target=\"_blank\" rel=\"noopener noreferrer\">\n          <Figure.Image width={cardWidth} src={process.env.PUBLIC_URL + card.img} alt={card.name}/>\n        </a>\n        {(card.bane || card.wotm || swapCard) && (\n          <Card.Body>\n            {card.bane && <Card.Text>Bane Card</Card.Text>}\n            {card.wotm && <Card.Text>Way of the Mouse</Card.Text>}\n            {swapCard && <Button size=\"sm\" variant=\"danger\" onClick={() => swapCard(card)}>Swap</Button>}\n          </Card.Body>\n        )}\n      </Card>\n    </li>\n  ));\n\n  return (\n    <ul className={styles.cardsList}>{cards}</ul>\n  )\n}\n","import { Col, Form, InputGroup, Row } from \"react-bootstrap\";\n\nexport default function SearchBar({ searchTerm, setSearchTerm, sortBy, setSortBy }) {\n  return (\n    <Row>\n      <Col\n        xs={{span: \"auto\", offset: 1}}\n        sm={{span: \"auto\", offset: 2}}\n        md={{span: \"auto\", offset: 3}}\n        lg={{span: \"auto\", offset: 4}}\n      >\n        <Form.Control\n          value={searchTerm}\n          placeholder=\"Search\"\n          onChange={(event) => setSearchTerm(event.target.value)}\n        />\n      </Col>\n      <Col xs={{span: \"auto\", offset: 1}} sm={{span: \"auto\", offset: 0}}>\n        <InputGroup>\n          <InputGroup.Text>Sort by: </InputGroup.Text>\n          <select value={sortBy} onChange={(event) => setSortBy(event.target.value)}>\n            <option value=\"name\">Name</option>\n            <option value=\"expansion\">Expansion</option>\n            <option value=\"cost\">Cost</option>\n          </select>\n        </InputGroup>\n      </Col>\n    </Row>\n  )\n}\n","import { useState } from \"react\";\nimport { sortTwoCards } from \"../lib/utils\";\nimport CardsDisplay from \"./CardsDisplay\";\nimport SearchBar from \"./SearchBar\";\n\nexport default function CardSearcher({ cards }) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState('name');\n\n  const filteredCards = cards.filter(({ name, expansion, types, cost, text }) => {\n    const parsedTerm = searchTerm.toLowerCase();\n    return ((name.toLowerCase().includes(parsedTerm)\n    || expansion.toLowerCase().includes(parsedTerm)\n    || types.some((type) => type.toLowerCase().includes(parsedTerm))\n    || (cost && (\n      (cost.coins && cost.coins.toString().includes(parsedTerm))\n      || (cost.potions && cost.potions.includes(parsedTerm))\n      || (cost.debt && cost.debt.includes(parsedTerm))\n    ))\n    || text.toLowerCase().includes(parsedTerm)))\n  });\n\n  const sortedCards = filteredCards.sort((card1, card2) => sortTwoCards(card1, card2, sortBy))\n\n  return (\n    <>\n      <SearchBar\n        searchTerm={searchTerm}\n        setSearchTerm={setSearchTerm}\n        sortBy={sortBy}\n        setSortBy={setSortBy}\n      />\n      <br/>\n      <CardsDisplay data={sortedCards}/>\n    </>\n  )\n}\n","import { Nav, Navbar } from \"react-bootstrap\";\n\nexport default function NavBar({ page, setPage }) {\n  return (\n    <Navbar variant=\"light\" bg=\"light\" style={{width: \"50%\", margin: \"auto\"}}>\n      <Nav variant=\"tabs\" className=\"m-auto\">\n        <Nav.Item>\n          <Nav.Link\n            active={page === 'generate'}\n            eventKey=\"key-2\"\n            onSelect={() => setPage('generate')}\n          >\n            Kingdom Generator\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link\n            active={page === 'browse'}\n            eventKey=\"key-1\"\n            onSelect={() => setPage('browse')}\n          >\n            Browse Cards\n          </Nav.Link>\n        </Nav.Item>\n      </Nav>\n    </Navbar>\n  )\n}\n","import { Accordion, Card, Col, Form, Row } from \"react-bootstrap\";\nimport styles from \"../styles/Selector.module.css\";\n\nexport default function Selector({ toggle, options, name, adjustAmts, expansionAmts, setExpansionAmts }) {\n  const selectors = options.map((option) =>\n    <li key={option} style={{margin: 5}}>\n      <Row>\n        <Col>\n          <Form.Check\n            type=\"checkbox\"\n            label={option}\n            onClick={() => toggle(option)}\n          />\n        </Col>\n        <Col xs=\"4\" sm=\"3\" md=\"4\" lg=\"3\">\n          {adjustAmts && (\n            <Form.Control\n              min=\"0\"\n              max=\"10\"\n              type=\"number\"\n              value={expansionAmts[option]}\n              onChange={(event) => setExpansionAmts({...expansionAmts, [option]: event.target.value})}\n            />\n          )}\n        </Col>\n      </Row>\n    </li>\n  );\n\n  return (\n    <Card>\n      <Accordion.Toggle as={Card.Header} eventKey={name} className={styles.header}>\n        Select {name}\n      </Accordion.Toggle>\n      <Accordion.Collapse eventKey={name}>\n        <ul>{selectors}</ul>\n      </Accordion.Collapse>\n    </Card>\n  )\n}\n","import { Accordion, Col } from \"react-bootstrap\";\nimport { EXPANSIONS, PROMOS } from \"../lib/constants\";\nimport Selector from \"./Selector\";\n\nexport default function KingdomSettings({ toggleExpansion, togglePromo, expansionAmts, setExpansionAmts }) {\n\n  return (\n    <>\n      <Col xs={{span: 10, offset: 1}} sm={{span: 8, offset: 2}} md={{span: 4, offset: 4}}>\n        <Accordion>\n          <Selector\n            toggle={toggleExpansion}\n            options={EXPANSIONS}\n            name=\"Expansions\"\n            adjustAmts\n            expansionAmts={expansionAmts}\n            setExpansionAmts={setExpansionAmts}\n          />\n        </Accordion>\n      </Col>\n      <Col xs={{span: 10, offset: 1}} sm={{span: 8, offset: 2}} md={{span: 4, offset: 4}}>\n        <Accordion>\n          <Selector toggle={togglePromo} options={PROMOS} name=\"Promos\"/>\n        </Accordion>\n      </Col>\n    </>\n  )\n}\n","import _ from \"lodash\";\nimport { min } from \"mathjs\";\nimport { useEffect, useState } from \"react\";\nimport { Button, Col, Row } from \"react-bootstrap\";\nimport { arrayIncludesCard, arrayIncludesCardName, drawCards, sortTwoCards } from \"../lib/utils\";\nimport CardsDisplay from \"./CardsDisplay\";\n\nexport default function KingdomDisplay({ kingdom, landscapes, swapCard, swapLandscape, usePlatinumColony, platinumColony, blackMarketOptions }) {\n  const [blackMarketDeck, setBlackMarketDeck] = useState([]);\n\n  useEffect(() => {\n    if (!arrayIncludesCardName(kingdom, 'Black Market')) {\n      setBlackMarketDeck([]);\n    }\n  }, [kingdom]);\n\n  const generateBlackMarketDeck = () => {\n    setBlackMarketDeck(_.sampleSize(blackMarketOptions, min(blackMarketOptions.length, 60)));\n  }\n\n  const swapBMCard = (oldCard) => {\n    const newOptions = blackMarketOptions.filter((card) => !arrayIncludesCard(blackMarketDeck, card));\n    if (newOptions.length > 0) {\n      const newBMDeck = blackMarketDeck.filter((card) => card.name !== oldCard.name);\n      const [newCard] = drawCards(newOptions, 1);\n      setBlackMarketDeck([...newBMDeck, newCard]);\n    }\n  }\n\n  const [wotm] = kingdom.filter((card) => card.wotm);\n  const supply = kingdom.filter((card) => card !== wotm);\n\n  return (\n    <>\n      <CardsDisplay data={supply.sort((card1, card2) => sortTwoCards(card1, card2, 'cost'))} swapCard={swapCard} cardWidth={170}/>\n      <Row>\n        {(landscapes.length > 0) && (\n          <Col>\n            <CardsDisplay data={landscapes.sort((card1, card2) => sortTwoCards(card1, card2, 'name'))} swapCard={swapLandscape} cardWidth={300}/>\n          </Col>\n        )}\n        {usePlatinumColony && (\n          <Col>\n            <CardsDisplay data={platinumColony} cardWidth={150}/>\n          </Col>\n        )}\n        {wotm && (\n          <Col>\n            <CardsDisplay data={[wotm]} swapCard={swapCard} cardWidth={150}/>\n          </Col>\n        )}\n      </Row>\n      <br/>\n      {arrayIncludesCardName(kingdom, 'Black Market') && (\n        <>\n          <Button onClick={() => generateBlackMarketDeck()}>Generate Black Market Deck</Button>\n          {(blackMarketDeck.length > 0) && (\n            <>\n              <br/>\n              <br/>\n              <CardsDisplay\n                data={blackMarketDeck.sort((card1, card2) => sortTwoCards(card1, card2, 'expansion'))}\n                swapCard={swapBMCard}\n                cardWidth={170}\n              />\n            </>\n          )}\n        </>\n      )}\n    </>\n  )\n}\n","import { Alert, Button, Modal } from \"react-bootstrap\";\n\nexport default function ModalAlert({ text, onClose }) {\n  return (\n    <Modal show={text !== ''} onHide={() => onClose()}>\n      <Modal.Body><Alert variant=\"danger\" style={{textAlign: 'center'}}>{text}</Alert></Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => onClose()}>\n          Close\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  )\n}\n","import { Button } from \"react-bootstrap\";\nimport ModalAlert from \"./ModalAlert\";\n\nexport default function GenerateButton({ generateKingdom, alert, setAlert}) {\n  return (\n    <>\n      <Button variant=\"success\" onClick={() => generateKingdom()}>Generate Kingdom!</Button>\n      <ModalAlert text={alert} onClose={() => setAlert('')}/>\n    </>\n  )\n}\n","import { useState } from \"react\";\nimport { addExtraCards, arrayIncludesCard, drawCards, generateBlackMarket, hasValidExpansion, isLandscape, isValidKingdomCard, sortTwoCards } from \"../lib/utils\";\nimport { Alert } from \"react-bootstrap\";\nimport { combinations, min, sum } from \"mathjs\";\nimport _ from \"lodash\";\nimport KingdomSettings from \"./KingdomSettings\";\nimport KingdomDisplay from \"./KingdomDisplay\";\nimport { EXPANSIONS } from \"../lib/constants\";\nimport GenerateButton from \"./GenerateButton\";\n\nexport default function KingdomGenerator({ cards }) {\n  const [kingdom, setKingdom] = useState([]);\n  const [landscapes, setLandScapes] = useState([]);\n  const [expansions, setExpansions] = useState([]);\n  const [promos, setPromos] = useState([]);\n  const [usePlatinumColony, setUsePlatinumColony] = useState(false);\n  const [alert, setAlert] = useState('');\n  const [expansionAmts, setExpansionAmts] = useState(_.fromPairs(EXPANSIONS.map((name) => [name, ''])));\n\n  const availableCards = cards.filter((card) =>\n    isValidKingdomCard(card, true)\n    && (hasValidExpansion(card, expansions) || promos.includes(card.name))\n  );\n\n  const availableLandscapes = cards.filter((card) =>\n    isLandscape(card)\n    && (hasValidExpansion(card, expansions) || promos.includes(card.name))\n  );\n\n  const remainingCards = availableCards.filter((card) => !arrayIncludesCard(kingdom, card));\n  const remainingLandscapes = availableLandscapes.filter((card) => !arrayIncludesCard(landscapes, card));\n\n  const generateKingdom = () => {\n    if (sum(_.toPairs(expansionAmts).map(([exp, amt]) => (expansions.includes(exp) ? amt : 0))) > 10) {\n      setAlert('Kingdom can\\'t include more than 10 cards!')\n      return\n    }\n    const newKingdom = generateKingdomFromRules();\n    if (newKingdom.length < 10) {\n      setAlert('You need at least 10 kingdom cards!')\n      return\n    }\n    const newLandscapes = drawCards(availableLandscapes, min(2, availableLandscapes.length));\n    const leftovers = availableCards.filter((card) => !arrayIncludesCard(newKingdom, card));\n    setKingdom(addExtraCards(newKingdom, newLandscapes, leftovers));\n    setLandScapes(newLandscapes);\n    if (newKingdom.length > 0) {\n      setUsePlatinumColony(_.sample(newKingdom).expansion === 'Prosperity');\n    }\n  }\n\n  const generateKingdomFromRules = () => {\n    const newCards = [];\n    const extraExpansions = [];\n    _.toPairs(expansionAmts).forEach(([exp, amt]) => {\n      if (amt !== '') {\n        newCards.push(\n          ...drawCards(availableCards, +amt, ((card) => hasValidExpansion(card, [exp]) && !arrayIncludesCard(newCards, card)))\n        );\n      } else if (expansions.includes(exp)) {\n        extraExpansions.push(exp);\n      }\n    });\n    const leftovers = availableCards.filter((card) => !arrayIncludesCard(newCards, card));\n    return newCards.concat(drawCards(leftovers, 10 - newCards.length, ((card) => (hasValidExpansion(card, extraExpansions) || promos.includes(card.name)))));\n  }\n\n  const swapCard = (oldCard) => {\n    if (remainingCards.length < 10) {\n      setAlert('There are no available kingdom cards to swap!')\n      return\n    }\n    let newKingdom = kingdom.filter((card) => card.name !== oldCard.name);\n    if (oldCard.name === 'Young Witch') {\n      newKingdom = newKingdom.filter((card) => !card.bane);\n    }\n    if (!oldCard.bane && !oldCard.wotm) {\n      const [newCard] = drawCards(remainingCards, 1);\n      newKingdom.push(newCard);\n    }\n    setKingdom(addExtraCards(newKingdom, landscapes, remainingCards));\n  }\n\n  const swapLandscape = (oldCard) => {\n    if (remainingLandscapes.length < 10) {\n      setAlert('There are no available landscapes to swap!')\n      return\n    }\n    let newLandscapes = landscapes.filter((card) => card.name !== oldCard.name);\n    let newKingdom = kingdom;\n    if (oldCard.name === 'Way of the Mouse') {\n      newKingdom = newKingdom.filter((card) => !card.wotm);\n    }\n    const [newCard] = drawCards(remainingLandscapes, 1);\n    newLandscapes = [...newLandscapes, newCard];\n    setLandScapes(newLandscapes);\n    setKingdom(addExtraCards(newKingdom, newLandscapes, remainingCards));\n  }\n\n  const toggleExpansion = (name) => {\n    expansions.includes(name)\n    ? setExpansions(expansions.filter((exp) => exp !== name))\n    : setExpansions([...expansions, name])\n  }\n\n  const togglePromo = (name) => {\n    promos.includes(name)\n    ? setPromos(promos.filter((promo) => promo !== name))\n    : setPromos([...promos, name])\n  }\n\n  const platinumColony = cards.filter((card) => card.name === 'Platinum' || card.name === 'Colony').sort((a, b) => sortTwoCards(a, b, 'cost'));\n\n  return (\n    <>\n      <KingdomSettings\n        toggleExpansion={toggleExpansion}\n        togglePromo={togglePromo}\n        expansionAmts={expansionAmts}\n        setExpansionAmts={setExpansionAmts}\n      />\n      <br/>\n      <GenerateButton generateKingdom={generateKingdom} alert={alert} setAlert={setAlert}/>\n      <br/>\n      <br/>\n      <KingdomDisplay\n        kingdom={kingdom}\n        landscapes={landscapes}\n        swapCard={swapCard}\n        swapLandscape={swapLandscape}\n        usePlatinumColony={usePlatinumColony}\n        platinumColony={platinumColony}\n        blackMarketOptions={generateBlackMarket(cards, kingdom, promos, expansions)}\n      />\n      {((kingdom.length >= 10) && (availableCards.length > 10)) && (\n        <Alert variant=\"success\" style={{width: '50%', margin: 'auto', marginTop: 20, marginBottom: 20}}>\n          Don't like this kingdom? Luckily for you, there are over {2 * combinations(availableCards.length, 10) * ((availableLandscapes.length >= 2) ? combinations(availableLandscapes.length, 2) : 1)} different combinations to choose from!\n        </Alert>\n      )}\n    </>\n  )\n}\n","import './styles/App.css';\nimport data from './data/dominion_cards.json';\nimport { useState } from 'react';\nimport CardSearcher from './components/CardSearcher';\nimport NavBar from './components/NavBar';\nimport KingdomGenerator from './components/KingdomGenerator';\n\nfunction App() {\n  const [cards] = useState(data);\n  const [page, setPage] = useState('generate');\n\n  return (\n    <div className=\"App\">\n      <img src={process.env.PUBLIC_URL + \"/logo.png\"} alt=\"logo\" className=\"logo\"/>\n      <NavBar page={page} setPage={setPage}/>\n      <br/>\n      {(page === 'generate') && <KingdomGenerator cards={cards}/>}\n      {(page === 'browse') && <CardSearcher cards={cards}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}